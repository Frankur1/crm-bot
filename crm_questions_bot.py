import os
import json
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ------------------ ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_SHEET_NAME = "–í–æ–ø—Ä–æ—Å—ã –°–†–ú"
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")
# --------------------------------------------------

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway Variables.")
if not GOOGLE_CREDENTIALS:
    raise ValueError("‚ùå GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway Variables.")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%d-%m-%Y %H:%M:%S"
)

# ------------------ üîê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï GOOGLE ------------------
try:
    # –ï—Å–ª–∏ Railway —É–±—Ä–∞–ª –¥–≤–æ–π–Ω—ã–µ —Å–ª—ç—à–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ
    fixed_json = GOOGLE_CREDENTIALS.replace('\\n', '\n')
    creds_json = json.loads(fixed_json)

    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
    client = gspread.authorize(creds)
    sheet = client.open(GOOGLE_SHEET_NAME).sheet1
    logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ '%s'", GOOGLE_SHEET_NAME)
except Exception as e:
    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: %s", e)
    raise

# ------------------ ü§ñ –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ–±—É—á–µ–Ω–∏—é CRM üí¨\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥, –∫–∞–∂–¥—ã–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ ‚úÖ"
    )

@dp.message(Command("info"))
async def info(message: types.Message):
    await message.answer(
        "üìò –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Google –¢–∞–±–ª–∏—Ü—É *¬´–í–æ–ø—Ä–æ—Å—ã –°–†–ú¬ª*, "
        "—á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –º–æ–≥–ª–∞ –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å—é–¥–∞ üëá",
        parse_mode="Markdown"
    )

@dp.message()
async def collect_question(message: types.Message):
    user = message.from_user
    question = message.text.strip()

    try:
        sheet.append_row([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            user.full_name or "-",
            f"@{user.username}" if user.username else "-",
            user.id,
            question
        ])
        logging.info("üíæ –í–æ–ø—Ä–æ—Å –æ—Ç %s (%s): %s", user.full_name, user.id, question)
        await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –°–ø–∞—Å–∏–±–æ üôå")

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: %s", e)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def main():
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
